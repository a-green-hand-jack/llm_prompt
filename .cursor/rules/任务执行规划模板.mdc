---
description: "任务执行规划模板"
globs: ["**/*.py", "**/pyproject.toml"]
alwaysApply: false
---

<!--
本模板由 Gemini 2.5 Pro 创建，旨在将用户的简洁功能需求转化为一个结构化、可追踪、可执行的任务计划。

使用说明：
AI 助手你好，请你将自己定位为一名严谨的项目经理和资深开发者。
当我提出一个功能需求并提供此模板时，你的核心任务是：
1.  **澄清与定义**: 主动与我沟通，将我的原始需求（通常很简洁）转化为第 1 部分中清晰、明确的【核心目标】和【验收标准】。
2.  **拆解与规划**: 在我们确认目标后，你必须在第 2 部分为该任务制定一个分步的、逻辑清晰的【任务拆解 (Todo List)】。
3.  **执行与记录**: 严格按照 Todo List 的顺序执行任务。每完成一步，你都必须：
    a. 回到第 2 部分，用 `[x]` 更新对应任务的勾选框。
    b. 在第 3 部分的【执行日志】中，记录下你的具体操作、代码变更、关键决策或遇到的问题。
这个文档是我们之间关于本次任务的“单一事实来源”，它既是你的行动剧本，也是我的进度监控面板。
-->

# 任务：[请填入任务的简明标题，例如：实现 FASTA 文件解析器]

## 1. 🎯 核心目标 (High-Level Goal)

- **用户原始需求**: `[请在此处粘贴用户的简洁指令]`
- **AI 澄清后的目标**: `[待 AI 与用户讨论后填写]`
- **验收标准 (Success Criteria)**: `[待 AI 与用户讨论后填写，例如：程序能成功解析包含N条序列的FASTA文件，并返回一个包含N个对象的列表]`

---

## 2. 📝 任务拆解 (Todo List)
*AI 助手，请在确认目标后，将任务拆解为以下步骤，并在执行中实时更新状态。*

- [ ] **步骤 1**: `[例如：创建 `FastaParser` 类及 `parse` 方法的骨架]`
- [ ] **步骤 2**: `[例如：实现读取文件并按 `>` 分割序列的逻辑]`
- [ ] **步骤 3**: `[例如：为每条序列实现提取 ID 和序列内容的功能]`
  - [ ] 3.1: `[子任务：提取 ID]`
  - [ ] 3.2: `[子任务：合并多行序列数据]`
- [ ] **步骤 4**: `[例如：根据《测试策略规范》编写单元测试]`
- [ ] **步骤 5**: `[例如：根据《Python 编码规范》添加 Docstrings 和类型注解]`

---

## 3. ⚙️ 执行日志与进度 (Execution Log & Progress)

*AI 助手，请在此处记录你的每一步操作，并链接到对应的任务步骤。*

- **[YYYY-MM-DD HH:MM] - ➡️ 开始执行 [步骤 1]**:
  > *[记录操作：正在 `src/parsers/fasta_parser.py` 文件中创建 `FastaParser` 类的基本结构...]*

- **[YYYY-MM-DD HH:MM] - ✅ 完成 [步骤 1]**:
  > *[记录产出：已创建类和方法骨架，代码如下...]*

- **[YYYY-MM-DD HH:MM] - ➡️ 开始执行 [步骤 2]**:
  > *...*
